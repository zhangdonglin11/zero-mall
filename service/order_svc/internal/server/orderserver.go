// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"zero-mall/service/order_svc/internal/logic"
	"zero-mall/service/order_svc/internal/svc"
	"zero-mall/service/order_svc/types/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

// 创建订单和回调
func (s *OrderServer) CreateOrder(ctx context.Context, in *order.OrderInfoRequest) (*order.OrderInfoResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *OrderServer) CallbackOrder(ctx context.Context, in *order.OrderInfoRequest) (*order.Empty, error) {
	l := logic.NewCallbackOrderLogic(ctx, s.svcCtx)
	return l.CallbackOrder(in)
}

func (s *OrderServer) OrderList(ctx context.Context, in *order.OrderFilterRequest) (*order.OrderListResponse, error) {
	l := logic.NewOrderListLogic(ctx, s.svcCtx)
	return l.OrderList(in)
}

func (s *OrderServer) OrderDetail(ctx context.Context, in *order.OrderInfoRequest) (*order.OrderInfoDetailResponse, error) {
	l := logic.NewOrderDetailLogic(ctx, s.svcCtx)
	return l.OrderDetail(in)
}

func (s *OrderServer) UpdateOrderStatus(ctx context.Context, in *order.OrderStatus) (*order.Empty, error) {
	l := logic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}
