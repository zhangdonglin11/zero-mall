// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"zero-mall/service/order_svc/types/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                   = order.Empty
	OrderFilterRequest      = order.OrderFilterRequest
	OrderGoodsDetail        = order.OrderGoodsDetail
	OrderInfoDetailResponse = order.OrderInfoDetailResponse
	OrderInfoRequest        = order.OrderInfoRequest
	OrderInfoResponse       = order.OrderInfoResponse
	OrderListResponse       = order.OrderListResponse
	OrderStatus             = order.OrderStatus

	Order interface {
		// 创建订单和回调
		CreateOrder(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error)
		CallbackOrder(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*Empty, error)
		OrderList(ctx context.Context, in *OrderFilterRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
		OrderDetail(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoDetailResponse, error)
		UpdateOrderStatus(ctx context.Context, in *OrderStatus, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

// 创建订单和回调
func (m *defaultOrder) CreateOrder(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) CallbackOrder(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CallbackOrder(ctx, in, opts...)
}

func (m *defaultOrder) OrderList(ctx context.Context, in *OrderFilterRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderList(ctx, in, opts...)
}

func (m *defaultOrder) OrderDetail(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*OrderInfoDetailResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderDetail(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrderStatus(ctx context.Context, in *OrderStatus, opts ...grpc.CallOption) (*Empty, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}
