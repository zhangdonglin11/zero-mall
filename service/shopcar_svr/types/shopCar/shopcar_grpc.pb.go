// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: shopcar.proto

package shopCar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopCarClient is the client API for ShopCar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopCarClient interface {
	// 添加商品到购物车
	AddGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarItemInfo, error)
	// 修改购物车商品数量和选中状态
	UpdateGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除购物车中的商品
	DeleteGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error)
	// 获取购物车中的商品 传用户id获取用户的购物车商品，+传checked获取购物车选中商品
	GetShopCarList(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarListResponse, error)
	// 批量删除购物车的商品
	BatchDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error)
	// 回滚
	RollBackDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error)
}

type shopCarClient struct {
	cc grpc.ClientConnInterface
}

func NewShopCarClient(cc grpc.ClientConnInterface) ShopCarClient {
	return &shopCarClient{cc}
}

func (c *shopCarClient) AddGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarItemInfo, error) {
	out := new(ShopCarItemInfo)
	err := c.cc.Invoke(ctx, "/shopcar.ShopCar/AddGoodsToCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCarClient) UpdateGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shopcar.ShopCar/UpdateGoodsToCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCarClient) DeleteGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shopcar.ShopCar/DeleteGoodsToCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCarClient) GetShopCarList(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarListResponse, error) {
	out := new(ShopCarListResponse)
	err := c.cc.Invoke(ctx, "/shopcar.ShopCar/GetShopCarList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCarClient) BatchDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shopcar.ShopCar/BatchDelShopCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCarClient) RollBackDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shopcar.ShopCar/RollBackDelShopCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopCarServer is the server API for ShopCar service.
// All implementations must embed UnimplementedShopCarServer
// for forward compatibility
type ShopCarServer interface {
	// 添加商品到购物车
	AddGoodsToCar(context.Context, *ShopCarItemInfo) (*ShopCarItemInfo, error)
	// 修改购物车商品数量和选中状态
	UpdateGoodsToCar(context.Context, *ShopCarItemInfo) (*Empty, error)
	// 删除购物车中的商品
	DeleteGoodsToCar(context.Context, *ShopCarItemInfo) (*Empty, error)
	// 获取购物车中的商品 传用户id获取用户的购物车商品，+传checked获取购物车选中商品
	GetShopCarList(context.Context, *ShopCarItemInfo) (*ShopCarListResponse, error)
	// 批量删除购物车的商品
	BatchDelShopCar(context.Context, *ShopCarListRequest) (*Empty, error)
	// 回滚
	RollBackDelShopCar(context.Context, *ShopCarListRequest) (*Empty, error)
	mustEmbedUnimplementedShopCarServer()
}

// UnimplementedShopCarServer must be embedded to have forward compatible implementations.
type UnimplementedShopCarServer struct {
}

func (UnimplementedShopCarServer) AddGoodsToCar(context.Context, *ShopCarItemInfo) (*ShopCarItemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoodsToCar not implemented")
}
func (UnimplementedShopCarServer) UpdateGoodsToCar(context.Context, *ShopCarItemInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsToCar not implemented")
}
func (UnimplementedShopCarServer) DeleteGoodsToCar(context.Context, *ShopCarItemInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodsToCar not implemented")
}
func (UnimplementedShopCarServer) GetShopCarList(context.Context, *ShopCarItemInfo) (*ShopCarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopCarList not implemented")
}
func (UnimplementedShopCarServer) BatchDelShopCar(context.Context, *ShopCarListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDelShopCar not implemented")
}
func (UnimplementedShopCarServer) RollBackDelShopCar(context.Context, *ShopCarListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBackDelShopCar not implemented")
}
func (UnimplementedShopCarServer) mustEmbedUnimplementedShopCarServer() {}

// UnsafeShopCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopCarServer will
// result in compilation errors.
type UnsafeShopCarServer interface {
	mustEmbedUnimplementedShopCarServer()
}

func RegisterShopCarServer(s grpc.ServiceRegistrar, srv ShopCarServer) {
	s.RegisterService(&ShopCar_ServiceDesc, srv)
}

func _ShopCar_AddGoodsToCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCarItemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCarServer).AddGoodsToCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopcar.ShopCar/AddGoodsToCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCarServer).AddGoodsToCar(ctx, req.(*ShopCarItemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCar_UpdateGoodsToCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCarItemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCarServer).UpdateGoodsToCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopcar.ShopCar/UpdateGoodsToCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCarServer).UpdateGoodsToCar(ctx, req.(*ShopCarItemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCar_DeleteGoodsToCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCarItemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCarServer).DeleteGoodsToCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopcar.ShopCar/DeleteGoodsToCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCarServer).DeleteGoodsToCar(ctx, req.(*ShopCarItemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCar_GetShopCarList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCarItemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCarServer).GetShopCarList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopcar.ShopCar/GetShopCarList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCarServer).GetShopCarList(ctx, req.(*ShopCarItemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCar_BatchDelShopCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCarListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCarServer).BatchDelShopCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopcar.ShopCar/BatchDelShopCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCarServer).BatchDelShopCar(ctx, req.(*ShopCarListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCar_RollBackDelShopCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCarListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCarServer).RollBackDelShopCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopcar.ShopCar/RollBackDelShopCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCarServer).RollBackDelShopCar(ctx, req.(*ShopCarListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopCar_ServiceDesc is the grpc.ServiceDesc for ShopCar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopCar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopcar.ShopCar",
	HandlerType: (*ShopCarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGoodsToCar",
			Handler:    _ShopCar_AddGoodsToCar_Handler,
		},
		{
			MethodName: "UpdateGoodsToCar",
			Handler:    _ShopCar_UpdateGoodsToCar_Handler,
		},
		{
			MethodName: "DeleteGoodsToCar",
			Handler:    _ShopCar_DeleteGoodsToCar_Handler,
		},
		{
			MethodName: "GetShopCarList",
			Handler:    _ShopCar_GetShopCarList_Handler,
		},
		{
			MethodName: "BatchDelShopCar",
			Handler:    _ShopCar_BatchDelShopCar_Handler,
		},
		{
			MethodName: "RollBackDelShopCar",
			Handler:    _ShopCar_RollBackDelShopCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopcar.proto",
}
