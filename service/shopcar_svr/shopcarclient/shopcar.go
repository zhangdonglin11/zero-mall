// Code generated by goctl. DO NOT EDIT.
// Source: shopcar.proto

package shopcarclient

import (
	"context"

	"zero-mall/service/shopcar_svr/types/shopCar"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty               = shopCar.Empty
	ShopCarItemInfo     = shopCar.ShopCarItemInfo
	ShopCarListRequest  = shopCar.ShopCarListRequest
	ShopCarListResponse = shopCar.ShopCarListResponse

	ShopCar interface {
		// 添加商品到购物车
		AddGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarItemInfo, error)
		// 修改购物车商品数量和选中状态
		UpdateGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error)
		// 删除购物车中的商品
		DeleteGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error)
		// 获取购物车中的商品 传用户id获取用户的购物车商品，+传checked获取购物车选中商品
		GetShopCarList(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarListResponse, error)
		// 批量删除购物车的商品
		BatchDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error)
		// 回滚
		RollBackDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultShopCar struct {
		cli zrpc.Client
	}
)

func NewShopCar(cli zrpc.Client) ShopCar {
	return &defaultShopCar{
		cli: cli,
	}
}

// 添加商品到购物车
func (m *defaultShopCar) AddGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarItemInfo, error) {
	client := shopCar.NewShopCarClient(m.cli.Conn())
	return client.AddGoodsToCar(ctx, in, opts...)
}

// 修改购物车商品数量和选中状态
func (m *defaultShopCar) UpdateGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := shopCar.NewShopCarClient(m.cli.Conn())
	return client.UpdateGoodsToCar(ctx, in, opts...)
}

// 删除购物车中的商品
func (m *defaultShopCar) DeleteGoodsToCar(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := shopCar.NewShopCarClient(m.cli.Conn())
	return client.DeleteGoodsToCar(ctx, in, opts...)
}

// 获取购物车中的商品 传用户id获取用户的购物车商品，+传checked获取购物车选中商品
func (m *defaultShopCar) GetShopCarList(ctx context.Context, in *ShopCarItemInfo, opts ...grpc.CallOption) (*ShopCarListResponse, error) {
	client := shopCar.NewShopCarClient(m.cli.Conn())
	return client.GetShopCarList(ctx, in, opts...)
}

// 批量删除购物车的商品
func (m *defaultShopCar) BatchDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := shopCar.NewShopCarClient(m.cli.Conn())
	return client.BatchDelShopCar(ctx, in, opts...)
}

// 回滚
func (m *defaultShopCar) RollBackDelShopCar(ctx context.Context, in *ShopCarListRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := shopCar.NewShopCarClient(m.cli.Conn())
	return client.RollBackDelShopCar(ctx, in, opts...)
}
