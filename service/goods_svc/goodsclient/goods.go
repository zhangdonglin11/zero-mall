// Code generated by goctl. DO NOT EDIT.
// Source: goods.proto

package goodsclient

import (
	"context"

	"zero-mall/service/goods_svc/types/goods"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchGoodsIdInfo   = goods.BatchGoodsIdInfo
	CreateGoodsInfo    = goods.CreateGoodsInfo
	DeleteGoodsInfo    = goods.DeleteGoodsInfo
	Empty              = goods.Empty
	GoodInfoRequest    = goods.GoodInfoRequest
	GoodsFilterRequest = goods.GoodsFilterRequest
	GoodsInfoResponse  = goods.GoodsInfoResponse
	GoodsListResponse  = goods.GoodsListResponse

	Goods interface {
		// 商品接口
		GoodsList(ctx context.Context, in *GoodsFilterRequest, opts ...grpc.CallOption) (*GoodsListResponse, error)
		BatchGetGoods(ctx context.Context, in *BatchGoodsIdInfo, opts ...grpc.CallOption) (*GoodsListResponse, error)
		CreateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*GoodsInfoResponse, error)
		DeleteGoods(ctx context.Context, in *DeleteGoodsInfo, opts ...grpc.CallOption) (*Empty, error)
		UpdateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*Empty, error)
		GetGoodsDetail(ctx context.Context, in *GoodInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error)
	}

	defaultGoods struct {
		cli zrpc.Client
	}
)

func NewGoods(cli zrpc.Client) Goods {
	return &defaultGoods{
		cli: cli,
	}
}

// 商品接口
func (m *defaultGoods) GoodsList(ctx context.Context, in *GoodsFilterRequest, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GoodsList(ctx, in, opts...)
}

func (m *defaultGoods) BatchGetGoods(ctx context.Context, in *BatchGoodsIdInfo, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.BatchGetGoods(ctx, in, opts...)
}

func (m *defaultGoods) CreateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*GoodsInfoResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CreateGoods(ctx, in, opts...)
}

func (m *defaultGoods) DeleteGoods(ctx context.Context, in *DeleteGoodsInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.DeleteGoods(ctx, in, opts...)
}

func (m *defaultGoods) UpdateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.UpdateGoods(ctx, in, opts...)
}

func (m *defaultGoods) GetGoodsDetail(ctx context.Context, in *GoodInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GetGoodsDetail(ctx, in, opts...)
}
